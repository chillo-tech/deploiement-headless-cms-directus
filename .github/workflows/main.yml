name: Deploiement headless cms directus
on:
  push:
    branches:
      - feature/*
  workflow_dispatch:

jobs:
  read-projects:
    name: Read projects
    runs-on: ubuntu-latest
    outputs:
      projects: ${{ steps.read-file.outputs.projects }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: 'read file'
        id: read-file
        run: |
          echo "projects=$(jq -c . < project-template.json)" >> $GITHUB_OUTPUT

  create-folder-on-remote-vm:
    runs-on: ubuntu-latest
    needs: read-projects
    strategy:
      matrix:
        projects: ${{fromJson(needs.read-projects.outputs.projects)}}
    steps:
      - name: key
        run: echo "Hello ${{ toJSON(matrix) }}"
      - name: create folder on remote vm
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          port: ${{ secrets.PORT }}
          script: |
            sudo mkdir -p /opt/applications/${{ matrix.projects.key }}
            sudo chmod ugo+rwx /opt/applications/${{ matrix.projects.key }}

  copy-configs-on-remote-vm:
    name: copy-configs-on-remote-vm
    runs-on: ubuntu-latest
    needs: [read-projects, create-folder-on-remote-vm]
    strategy:
      matrix:
        projects: ${{fromJson(needs.read-projects.outputs.projects)}}
    steps:
      - uses: actions/checkout@v3
      - name: set docker compose variables on remote server
        run: |
          sed -i 's|NOM_APPLICATION|${{ matrix.projects.key }}|' docker-compose.yaml
          sed -i 's|PORT_APPLICATION|${{ matrix.projects.port }}|' docker-compose.yaml

      - name: copy docker compose to remote server
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          port: ${{ secrets.PORT }}
          source: 'docker-compose.yaml'
          target: /opt/applications/${{ matrix.projects.key }}

  run-cms-onremote-vm:
    name: run-cms-onremote-vm
    runs-on: ubuntu-latest
    needs: [read-projects, copy-configs-on-remote-vm, read-projects]
    strategy:
      matrix:
        projects: ${{fromJson(needs.read-projects.outputs.projects)}}
    steps:
      - name: run-CMS
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          port: ${{ secrets.PORT }}
          script: |

            sudo docker network create ${{ matrix.projects.key }} || true
            sudo docker volume create ${{ matrix.projects.key }}-database || true
            sudo docker volume create ${{ matrix.projects.key }}-backoffice || true
            sudo docker volume create ${{ matrix.projects.key }}-backoffice-config || true
            sudo docker volume create ${{ matrix.projects.key }}-backoffice-src || true
            sudo docker volume create ${{ matrix.projects.key }}-backoffice-uploads || true
            sudo docker volume create ${{ matrix.projects.key }}-backoffice-extensions || true
            sudo docker compose -f /opt/applications/${{ matrix.projects.key }}/docker-compose.yaml stop
            sudo docker compose -f /opt/applications/${{ matrix.projects.key }}/docker-compose.yaml rm -f
            sudo docker compose -f /opt/applications/${{ matrix.projects.key }}/docker-compose.yaml up -d
